// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int           @id @default(autoincrement())
  name      String
  email     String        @unique
  phone     Int
  password  String
  isAdmin   Boolean       @default(false)
  comments  Commentaire[]
  orders    Order[]
  produits  Produit[]
  createdAt DateTime      @default(now()) @map("created_at")
  updateAt  DateTime      @updatedAt @map("update_at")
}

model Produit {
  id           Int           @id @default(autoincrement())
  name         String
  description  String        @db.Text
  prix         String
  nbrestock    String
  like         String?
  images       Image[]
  commentaires Commentaire[]
  orders       Order[]       @relation("OrderProduits")
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade , onUpdate: Cascade)
  userId       Int
  categorie    Categorie     @relation(fields: [categorieId], references: [id], onDelete: Cascade , onUpdate: Cascade)
  categorieId  Int
  createdAt    DateTime      @default(now()) @map("created_at")
  updateAt     DateTime      @updatedAt @map("update_at")
}

model Categorie {
  id        Int       @id @default(autoincrement())
  name      String
  produits  Produit[]
  createdAt DateTime  @default(now()) @map("created_at")
  updateAt  DateTime  @updatedAt @map("update_at")
}

model Image {
  id        Int      @id @default(autoincrement())
  name      String
  produits  Produit  @relation(fields: [produitId], references: [id], onDelete: Cascade , onUpdate: Cascade)
  produitId Int
  createdAt DateTime @default(now()) @map("created_at")
  updateAt  DateTime @updatedAt @map("update_at")
}

model Order {
  id        Int       @id @default(autoincrement())
  total     String
  produits  Produit[] @relation("OrderProduits")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade , onUpdate: Cascade)
  userId    Int
  createdAt DateTime  @default(now()) @map("created_at")
  updateAt  DateTime  @updatedAt @map("update_at")
}
model Commentaire {
  id        Int      @id @default(autoincrement())
  name      String   @db.Text
  rating    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade , onUpdate: Cascade)
  userId    Int
  produits  Produit  @relation(fields: [produitId], references: [id], onDelete: Cascade , onUpdate: Cascade)
  produitId Int
  createdAt DateTime @default(now()) @map("created_at")
  updateAt  DateTime @updatedAt @map("update_at")
}
